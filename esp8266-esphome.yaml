substitutions:
  friendly_name: "Office nixie clock"
  device_name: "clock-nixie-office"

packages:
  custom: !include base/custom.yaml

esp8266:
  board: esp12e

uart:
  rx_pin: RX
  tx_pin: TX
  id: uart_main
  baud_rate: 115200
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

time:
  - platform: homeassistant
    id: time_source
    on_time_sync:
      then:
        - lambda: |-
            char str[64];
            tm now_tm;
            time_t now = id(time_source).now().timestamp;
            localtime_r(&now, &now_tm);
            int len = snprintf(str, sizeof(str), "^T%02d%02d%02d%02d%02d%04d\n", now_tm.tm_hour, now_tm.tm_min, now_tm.tm_sec, now_tm.tm_mday, now_tm.tm_mon + 1, now_tm.tm_year + 1900);
            if (len < 0 || len >= sizeof(str)) {
              return;
            }
            id(uart_main).write_str(str);

sensor:
  - platform: homeassistant
    attribute: temperature
    entity_id: weather.foxden_home
    internal: true
    id: clock_temperature
    on_value:
      then:
        - lambda: |-
            char str[64];
            int len = snprintf(str, sizeof(str), "^S%.4f\n", x);
            if (len < 0 || len >= sizeof(str)) {
              return;
            }
            id(uart_main).write_str(str);

api:
  services:
    - service: notify
      variables:
        duration: int
        text: string
        dots: string
        color: int[]
        animations: bool
      then:
        - lambda: |-
            if (color.size() != 3) {
              return;
            }
            char str[64];
            int len = snprintf(str, sizeof(str), "^F%08d%03s% 9s%02x%02x%02x\n", duration, dots.c_str(), text.c_str(), color[0], color[1], color[2]);
            if (len < 0 || len >= sizeof(str)) {
              return;
            }
            id(uart_main).write_str(str);
    - service: command
      variables:
        command: string
      then:
        - lambda: |-
            id(uart_main).write_byte('^');
            id(uart_main).write_str(command.c_str());
            id(uart_main).write_byte('\n');
